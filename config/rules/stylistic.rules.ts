import type { Linter } from 'eslint';

const indentEntry: Linter.RuleEntry = [
    'error',
    4,
    {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        SwitchCase: 1,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        VariableDeclarator: 1,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        outerIIFEBody: 0,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        MemberExpression: 1,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        FunctionDeclaration: {
            body: 1,
            parameters: 1,
        },
        // eslint-disable-next-line @typescript-eslint/naming-convention
        FunctionExpression: {
            body: 1,
            parameters: 1,
        },
        // eslint-disable-next-line @typescript-eslint/naming-convention
        CallExpression: {
            arguments: 1,
        },
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ArrayExpression: 1,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ObjectExpression: 1,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        ImportDeclaration: 1,
        flatTernaryExpressions: true,
        offsetTernaryExpressions: true,
        ignoreComments: false,
    },
];

// eslint-disable-next-line @typescript-eslint/naming-convention
const noMultipleEmptyLines: Linter.RuleEntry = ['error', { max: 1, maxEOF: 0, maxBOF: 0 }];

/** https://eslint.style/rules */
export const stylisticRules: Linter.RulesRecord = Object.freeze<Linter.RulesRecord>({
    '@stylistic/array-bracket-newline': ['error', 'consistent'],
    '@stylistic/array-bracket-spacing': ['error', 'never'],
    '@stylistic/array-element-newline': ['error', 'consistent'],
    '@stylistic/arrow-parens': ['error', 'as-needed', { requireForBlockBody: false }],
    '@stylistic/arrow-spacing': ['error', { before: true, after: true }],
    '@stylistic/block-spacing': ['error', 'always'],
    '@stylistic/brace-style': ['error', '1tbs', { allowSingleLine: true }],
    '@stylistic/comma-dangle': ['error', 'always-multiline'],
    '@stylistic/comma-spacing': ['error', { before: false, after: true }],
    '@stylistic/comma-style': ['error', 'last'],
    '@stylistic/computed-property-spacing': ['error', 'never'],
    '@stylistic/curly-newline': ['error', { consistent: true }],
    '@stylistic/dot-location': ['error', 'property'],
    '@stylistic/eol-last': ['error', 'always'],
    '@stylistic/func-call-spacing': ['error', 'never'],
    '@stylistic/function-call-argument-newline': ['error', 'consistent'],
    '@stylistic/function-call-spacing': ['error', 'never'],
    '@stylistic/function-paren-newline': ['error', 'consistent'],
    '@stylistic/generator-star-spacing': ['error', { before: false, after: true }],
    '@stylistic/implicit-arrow-linebreak': ['error', 'beside'],
    '@stylistic/indent': indentEntry,
    '@stylistic/indent-binary-ops': ['error', 4],
    '@stylistic/jsx-child-element-spacing': 'off',
    '@stylistic/jsx-closing-bracket-location': 'off',
    '@stylistic/jsx-closing-tag-location': 'off',
    '@stylistic/jsx-curly-brace-presence': 'off',
    '@stylistic/jsx-curly-newline': 'off',
    '@stylistic/jsx-curly-spacing': 'off',
    '@stylistic/jsx-equals-spacing': 'off',
    '@stylistic/jsx-first-prop-new-line': 'off',
    '@stylistic/jsx-function-call-newline': 'off',
    '@stylistic/jsx-indent': 'off',
    '@stylistic/jsx-indent-props': 'off',
    '@stylistic/jsx-max-props-per-line': 'off',
    '@stylistic/jsx-newline': 'off',
    '@stylistic/jsx-one-expression-per-line': 'off',
    '@stylistic/jsx-pascal-case': 'off',
    '@stylistic/jsx-props-no-multi-spaces': 'off',
    '@stylistic/jsx-quotes': 'off',
    '@stylistic/jsx-self-closing-comp': 'off',
    '@stylistic/jsx-sort-props': 'off',
    '@stylistic/jsx-tag-spacing': 'off',
    '@stylistic/jsx-wrap-multilines': 'off',
    '@stylistic/key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
    '@stylistic/keyword-spacing': ['error', { before: true, after: true }],
    '@stylistic/line-comment-position': ['error', { position: 'above' }],
    '@stylistic/linebreak-style': ['error', 'unix'],
    '@stylistic/lines-around-comment': ['error', { afterBlockComment: false, beforeBlockComment: true, beforeLineComment: true, afterLineComment: false, allowBlockStart: true, allowBlockEnd: true, allowObjectStart: true, allowObjectEnd: true, allowArrayStart: true, allowArrayEnd: true, allowClassStart: true, allowClassEnd: true }],
    '@stylistic/lines-between-class-members': ['error', 'always'],
    '@stylistic/max-len': 'off',
    '@stylistic/max-statements-per-line': ['error', { max: 3 }],
    '@stylistic/member-delimiter-style': 'error',
    '@stylistic/multiline-comment-style': ['error', 'starred-block'],
    '@stylistic/multiline-ternary': ['error', 'always-multiline'],
    '@stylistic/new-parens': ['error', 'always'],
    '@stylistic/newline-per-chained-call': 'off',
    '@stylistic/no-confusing-arrow': ['error', { allowParens: true }],
    '@stylistic/no-extra-parens': ['error', 'functions'],
    '@stylistic/no-extra-semi': 'error',
    '@stylistic/no-floating-decimal': 'error',
    '@stylistic/no-mixed-operators': 'error',
    '@stylistic/no-mixed-spaces-and-tabs': 'error',
    '@stylistic/no-multi-spaces': 'error',
    '@stylistic/no-multiple-empty-lines': noMultipleEmptyLines,
    '@stylistic/no-tabs': 'error',
    '@stylistic/no-trailing-spaces': 'error',
    '@stylistic/no-whitespace-before-property': 'error',
    '@stylistic/nonblock-statement-body-position': 'off',
    '@stylistic/object-curly-newline': ['error', { consistent: true }],
    '@stylistic/object-curly-spacing': ['error', 'always', { arraysInObjects: true, objectsInObjects: true }],
    '@stylistic/object-property-newline': 'off',
    '@stylistic/one-var-declaration-per-line': 'off',
    '@stylistic/operator-linebreak': ['error', 'before'],
    '@stylistic/padded-blocks': ['error', { blocks: 'never', classes: 'always', switches: 'never' }, { allowSingleLineBlocks: true }],
    '@stylistic/padding-line-between-statements': 'off',
    '@stylistic/quote-props': ['error', 'consistent', { keywords: true }],
    '@stylistic/quotes': ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
    '@stylistic/rest-spread-spacing': ['error', 'never'],
    '@stylistic/semi': ['error', 'always', { omitLastInOneLineBlock: false }],
    '@stylistic/semi-spacing': ['error', { before: false, after: true }],
    '@stylistic/semi-style': ['error', 'last'],
    '@stylistic/space-before-blocks': ['error', 'always'],
    '@stylistic/space-before-function-paren': ['error', { anonymous: 'ignore', asyncArrow: 'always', named: 'never' }],
    '@stylistic/space-in-parens': ['error', 'never'],
    '@stylistic/space-infix-ops': ['error', { int32Hint: false }],
    '@stylistic/space-unary-ops': ['error', { words: true, nonwords: false }],
    '@stylistic/spaced-comment': ['error', 'always', { block: { balanced: true } }],
    '@stylistic/switch-colon-spacing': ['error', { after: true, before: false }],
    '@stylistic/template-curly-spacing': ['error', 'never'],
    '@stylistic/template-tag-spacing': ['error', 'never'],
    '@stylistic/type-annotation-spacing': ['error', { before: false, after: true, overrides: { arrow: { before: true, after: true } } }],
    '@stylistic/type-generic-spacing': 'error',
    '@stylistic/type-named-tuple-spacing': 'error',
    '@stylistic/wrap-iife': ['error', 'any'],
    '@stylistic/wrap-regex': 'off',
    '@stylistic/yield-star-spacing': ['error', 'after'],
} satisfies Linter.RulesRecord);
